import React, { useState } from "react";
import { Page, Box, Text } from "zmp-ui";
import { useNavigate } from "zmp-ui";

// Import banner image
import bannerImage from "../../static/img/banner_GOSafe.jpg";

// Components
import LoadingScreen from "../../components/LoadingScreen";
import ServiceSection from "../../components/ServiceSection";
import BottomNavigation from "../../components/BottomNavigation";
// import PullToRefresh from "../../components/PullToRefresh";
import DevFeatureToast from "../../components/DevFeatureToast";
import PhonePermissionModal from "../../components/PhonePermissionModal"; // Th√™m d√≤ng n√†y

// Hooks
import { usePhoneAuth } from "../../hooks/usePhoneAuth";
import { useServiceNavigation } from "../../hooks/useNavigation";
import { useUserInfo } from "../../contexts/UserContext";

// Constants
import { DRIVER_SERVICES, OTHER_SERVICES } from "../../constants/dashboard";

// Danh s√°ch services ƒë√£ ph√°t tri·ªÉn
const DEVELOPED_SERVICES = ["sms-brandname", "zalo-chat", "jwt-test"];

const Dashboard = () => {
  const navigate = useNavigate();
  // const [isRefreshing, setIsRefreshing] = useState(false);
  const [showPhoneModal, setShowPhoneModal] = useState(false); // Th√™m state n√†y
  const [pendingServiceId, setPendingServiceId] = useState(null); // ƒê·ªÉ l∆∞u serviceId ƒëang ch·ªù

  const { isGettingPhone, checkPhoneExists, requestPhonePermission } =
    usePhoneAuth();

  const { userInfo, fetchUserInfo } = useUserInfo();
  const { handleServiceClick } = useServiceNavigation(navigate);

  // Helper function to check if phone number exists
  const hasValidPhoneNumber = () => {
    const phoneFromUserInfo = userInfo?.userInfo?.phoneNumber;
    const phoneFromContext = userInfo?.phoneNumber; // C√≥ th·ªÉ phoneNumber n·∫±m ·ªü level cao h∆°n
    const phone = phoneFromUserInfo || phoneFromContext;

    console.log("üîç Dashboard - Checking phone number:", {
      phoneFromUserInfo,
      phoneFromContext,
      finalPhone: phone,
      userInfo,
      hasValidPhone:
        phone &&
        phone !== "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i" &&
        phone !== "C·∫ßn c·∫•p quy·ªÅn" &&
        phone !== "null" &&
        phone !== "undefined" &&
        phone !== null,
    });

    return (
      phone &&
      phone !== "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i" &&
      phone !== "C·∫ßn c·∫•p quy·ªÅn" &&
      phone !== "null" &&
      phone !== "undefined" &&
      phone !== null
    );
  };

  const handleServiceClickWithToast = (showToast) => (serviceId) => {
    console.log("üéØ Service clicked:", serviceId);
    
    const hasPhone = hasValidPhoneNumber();
    console.log("üì± Has valid phone number:", hasPhone);

    if (!hasPhone) {
      console.log("‚ùå No phone number, showing permission modal");
      setPendingServiceId(serviceId);
      setShowPhoneModal(true);
      return;
    } else {
      console.log("‚úÖ Phone number exists, navigating to service:", serviceId);
      handleServiceClick(serviceId);
    }
  };

  // Handle pull-to-refresh
  // const handleRefresh = async () => {
  //   setIsRefreshing(true);
  //   try {
  //     // Simulate network delay for better UX
  //     const refreshPromise = refetch();
  //     const minDelayPromise = new Promise((resolve) =>
  //       setTimeout(resolve, 800)
  //     );

  //     // Wait for both data refresh and minimum delay
  //     await Promise.all([refreshPromise, minDelayPromise]);
  //   } catch (error) {
  //     console.error("Error refreshing data:", error);
  //     // Still wait minimum time even on error for consistent UX
  //     await new Promise((resolve) => setTimeout(resolve, 500));
  //   } finally {
  //     setIsRefreshing(false);
  //   }
  // };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒë·ªìng √Ω c·∫•p quy·ªÅn s·ªë ƒëi·ªán tho·∫°i
  const handlePhonePermission = async () => {
    console.log("üîê User agreed to phone permission");
    const result = await requestPhonePermission();
    console.log("üì± Phone permission result:", result);
    
    if (result.success) {
      setShowPhoneModal(false);
      console.log("‚úÖ Phone permission successful, proceeding to service");
      
      // Navigate to pending service if exists
      setTimeout(() => {
        if (pendingServiceId) {
          console.log("üöÄ Navigating to pending service:", pendingServiceId);
          handleServiceClick(pendingServiceId);
          setPendingServiceId(null);
        }
      }, 100);
    } else {
      console.error("‚ùå Phone permission failed:", result.error);
      // C√≥ th·ªÉ show error toast ·ªü ƒë√¢y
    }
  };  return (
    <Page
      className="dashboard-page"
      style={{
        height: "100vh",
        backgroundColor: "#fb923c",
        background: "linear-gradient(to bottom, #fb923c, #ef4444)",
        display: "flex",
        flexDirection: "column",
        position: "relative",
        overflow: "auto", // Thay ƒë·ªïi t·ª´ "hidden" th√†nh "auto" ƒë·ªÉ c√≥ th·ªÉ scroll
      }}
    >
      <DevFeatureToast>
        {(showToast) => (
          // <PullToRefresh onRefresh={handleRefresh} refreshing={isRefreshing}>
          <Box
            style={{
              overflowY: "auto", // Cho ph√©p scroll theo chi·ªÅu d·ªçc
              height: "calc(100vh - 80px)", // Tr·ª´ ƒëi chi·ªÅu cao c·ªßa bottom navigation
              paddingBottom: "80px", // ƒê·∫£m b·∫£o kh√¥ng b·ªã che b·ªüi bottom nav
            }}
          >
            {/* Hero Banner */}
            <Box
              style={{
                background: "linear-gradient(to right, #fb923c, #ef4444)",
                paddingTop: "env(safe-area-inset-top, 32px)", // tr√°nh Dynamic Island che m·∫•t
              }}
            >
              <img
                src={bannerImage}
                alt="GOSafe Banner"
                style={{
                  width: "100%",
                  height: "270px",
                  objectFit: "contain",
                  userSelect: "none",
                  pointerEvents: "none",
                  display: "block",
                }}
              />
            </Box>
            {/* <UserHeader userInfo={userInfo} isLoading={isLoading} /> */}

            {/* Main Content */}
            <Box
              style={{
                background: "linear-gradient(to bottom, #fb923c, #ef4444)",
                minHeight: "auto", // Thay ƒë·ªïi t·ª´ calc(100vh - 192px) th√†nh auto
                paddingBottom: "40px", // Gi·∫£m padding bottom
              }}
            >
              <ServiceSection
                title="D·ªäCH V·ª§ T√ÄI X·∫æ"
                services={DRIVER_SERVICES}
                onServiceClick={handleServiceClickWithToast(showToast)}
                columns={3}
              />
              <ServiceSection
                title="C√ÅC D·ªäCH V·ª§ KH√ÅC C·ª¶A GOSAFE"
                services={OTHER_SERVICES}
                onServiceClick={handleServiceClickWithToast(showToast)}
                columns={3}
              />
            </Box>
          </Box>
          // </PullToRefresh>
        )}
      </DevFeatureToast>

      <BottomNavigation
        activeTab="home"
        style={{
          position: "fixed",
          bottom: 0,
          left: 0,
          right: 0,
          zIndex: 1000,
        }}
      />

      {/* Modal xin quy·ªÅn s·ªë ƒëi·ªán tho·∫°i */}
      <PhonePermissionModal
        visible={showPhoneModal}
        onClose={() => setShowPhoneModal(false)}
        onAgree={handlePhonePermission}
        isGettingPhone={isGettingPhone}
      />
    </Page>
  );
};

export default Dashboard;
